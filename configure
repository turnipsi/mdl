#!/bin/sh
# $Id: configure,v 1.26 2016/09/05 20:07:52 je Exp $

# Copyright (c) 2016 Juha Erkkil√§ <je@turnipsi.no-ip.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -eu

cc=${CC:-cc}
srcdir="$(dirname $0)"
config_h_path="${srcdir}/config.h"
config_mk_path="${srcdir}/config.mk"
include_compat_h=false

append_to_config_h()  { echo "$1" >> "$config_h_path";  }
append_to_config_mk() { echo "$1" >> "$config_mk_path"; }

init_config() {
  cat /dev/null > "$config_h_path"
  cat /dev/null > "$config_mk_path"
}

show_config() {
  if [ -s "$config_h_path" ]; then
    echo
    echo "Created the following config.h:"
    sed 's/^/    /' "$config_h_path"
  fi
  if [ -s "$config_mk_path" ]; then
    echo
    echo "Created the following config.mk:"
    sed 's/^/    /' "$config_mk_path"
  fi
}

check_cc() {
  $cc -x c -Werror-implicit-function-declaration -o /dev/null - 2>/dev/null
}

check_asprintf() {
  check_cc <<'EOF'
#include <stdio.h>
int main(void) { asprintf(NULL, NULL); }
EOF

}

check_clock_gettime_monotonic() {
  check_cc <<'EOF'
#include <time.h>
int main(void) { clock_gettime(CLOCK_MONOTONIC, NULL); }
EOF
}

check_clock_gettime_uptime() {
  check_cc <<'EOF'
#include <time.h>
int main(void) { clock_gettime(CLOCK_UPTIME, NULL); }
EOF
}

check_dead() {
  check_cc <<'EOF'
#include <sys/types.h>
void __dead foo(void);
int main(void) {}
EOF
}

check_getdtablecount() {
  check_cc <<'EOF'
#include <unistd.h>
int main(void) { getdtablecount(); }
EOF
}

check_imsg() {
  check_cc <<'EOF'
#include <sys/types.h>
#include <sys/queue.h>
#include <sys/uio.h>
#include <imsg.h>
int main(void) {}
EOF
}

check_iov_max() {
  check_cc <<'EOF'
#include <limits.h>
int main(void) { int i; i = IOV_MAX; }
EOF
}

check_malloc_options() {
  check_cc <<'EOF'
#include <stdlib.h>
extern char *malloc_options;
int main(void) { malloc_options = (char *) "AFGJPS"; }
EOF
}

check_pledge() {
  check_cc <<'EOF'
#include <unistd.h>
int main(void) { pledge(NULL, NULL); }
EOF
}

check_reallocarray() {
  check_cc <<'EOF'
#include <stdlib.h>
int main(void) { reallocarray(NULL, 0, 0); }
EOF
}

check_setproctitle() {
  check_cc <<'EOF'
#include <sys/types.h>
#include <stdlib.h>
#include <unistd.h>
int main(void) { setproctitle("a"); }
EOF
}

check_sndio() {
  check_cc <<'EOF'
#include <sndio.h>
int main(void) {}
EOF
}

check_strlcat() {
  check_cc <<'EOF'
#include <string.h>
int main(void) { strlcat(NULL, NULL, 0); }
EOF
}

check_strlcpy() {
  check_cc <<'EOF'
#include <string.h>
int main(void) { strlcpy(NULL, NULL, 0); }
EOF
}

check_strsep() {
  check_cc <<'EOF'
#include <string.h>
int main(void) { strsep(NULL, NULL); }
EOF
}

check_strtonum() {
  check_cc <<'EOF'
#include <stdlib.h>
int main(void) { strtonum(NULL, 0, 0, NULL); }
EOF
}

check_sys_midiio() {
  check_cc <<'EOF'
#include <sys/types.h>
#include <sys/midiio.h>
int main(void) {}
EOF
}

check_uio_maxiov() {
  check_cc <<'EOF'
#include <sys/uio.h>
int main(void) { int i; i = UIO_MAXIOV; return 0; }
EOF
}

check_va_copy() {
  check_cc <<'EOF'
#include <stdarg.h>
int main(void) { va_list dst, src; va_copy(dst, src); }
EOF
}

do_check() {
  checkname=$1
  checkfunc=$2

  printf 'Checking for %s ... ' "$checkname"
  if $checkfunc; then
    echo ok.
  else
    echo NOT found.
    return 1
  fi

  return 0
}

usage() {
  cat <<'EOF'
Available options:
  --enable-debug
  --disable-debug
  --enable-pledge
  --disable-pledge
EOF
}

enable_debug=true
enable_pledge=true

while [ $# -gt 0 ]; do
  case $1 in
    --enable-debug)   enable_debug=true   ;;
    --disable-debug)  enable_debug=false  ;;
    --enable-pledge)  enable_pledge=true  ;;
    --disable-pledge) enable_pledge=false ;;
    *)
      echo "Unknown configure option '$1'.\n" >&2
      usage >&2
      exit 1
      ;;
  esac
  shift
done

init_config

if do_check asprintf check_asprintf; then
  append_to_config_h '#define HAVE_ASPRINTF 1'
else
  append_to_config_mk 'SRCS += ${COMPATDIR}/asprintf.c'
  include_compat_h=true
fi

if do_check 'clock_gettime(CLOCK_UPTIME, tp)' \
  check_clock_gettime_uptime; then
    append_to_config_h '#define HAVE_CLOCK_UPTIME 1'
elif ! do_check 'clock_gettime(CLOCK_MONOTONIC, tp)' \
  check_clock_gettime_monotonic; then
    echo 'Could not find support for CLOCK_UPTIME or CLOCK_MONOTONIC' >&2
    exit 1
fi

if do_check attribute__dead check_dead; then
  append_to_config_h '#define HAVE_ATTRIBUTE__DEAD 1'
fi

if $enable_debug && do_check malloc_options check_malloc_options; then
  append_to_config_h '#define HAVE_MALLOC_OPTIONS 1'
fi

if do_check imsg check_imsg; then
  append_to_config_h '#define HAVE_IMSG 1'
  append_to_config_mk 'LIBMDL_LDADD += -lutil'
else
  append_to_config_mk 'SRCS += ${COMPATDIR}/imsg-buffer.c'
  append_to_config_mk 'SRCS += ${COMPATDIR}/imsg.c'
  include_compat_h=true
fi

# suggested by compat/imsg.c
if do_check getdtablecount check_getdtablecount; then
  append_to_config_h '#define HAVE_GETDTABLECOUNT 1'
fi

# POSIX says IOV_MAX should be defined by limits.h, but Linux does not care.
if do_check IOV_MAX check_iov_max; then
  :
elif do_check UIO_MAXIOV check_uio_maxiov; then
  append_to_config_h '#define IOV_MAX UIO_MAXIOV'
else
  echo 'IOV_MAX or UIO_MAXIOV not defined by limits.h or sys/uio.h' >&2
  exit 1
fi

if $enable_pledge && do_check 'pledge()' check_pledge; then
  append_to_config_h '#define HAVE_PLEDGE 1'
else
  append_to_config_mk 'SRCS += ${COMPATDIR}/pledge.c'
  include_compat_h=true
fi

if do_check 'reallocarray()' check_reallocarray; then
  append_to_config_h '#define HAVE_REALLOCARRAY 1'
else
  append_to_config_mk 'SRCS += ${COMPATDIR}/reallocarray.c'
  include_compat_h=true
fi

if do_check 'setproctitle()' check_setproctitle; then
  append_to_config_h '#define HAVE_SETPROCTITLE 1'
else
  if [ "$(uname -s)" = "Linux" ]; then
    append_to_config_h '#define SPT_TYPE SPT_REUSEARGV'
  fi
  append_to_config_mk 'SRCS += ${COMPATDIR}/setproctitle.c'
  include_compat_h=true
fi

if do_check 'strlcat()' check_strlcat; then
  append_to_config_h '#define HAVE_STRLCAT 1'
else
  append_to_config_mk 'SRCS += ${COMPATDIR}/strlcat.c'
  include_compat_h=true
fi

if do_check 'strlcpy()' check_strlcpy; then
  append_to_config_h '#define HAVE_STRLCPY 1'
else
  append_to_config_mk 'SRCS += ${COMPATDIR}/strlcpy.c'
  include_compat_h=true
fi

if do_check 'strsep()' check_strsep; then
  append_to_config_h '#define HAVE_STRSEP 1'
else
  append_to_config_mk 'SRCS += ${COMPATDIR}/strsep.c'
  include_compat_h=true
fi

if do_check 'strtonum()' check_strtonum; then
  append_to_config_h '#define HAVE_STRTONUM 1'
else
  append_to_config_mk 'SRCS += ${COMPATDIR}/strtonum.c'
  include_compat_h=true
fi

if do_check sndio check_sndio; then
  append_to_config_h '#define HAVE_SNDIO 1'
  append_to_config_mk 'LIBMDL_LDADD += -lsndio'
fi

if do_check va_copy check_va_copy; then
  append_to_config_h '#define HAVE_VA_COPY 1'
fi

if ! $enable_debug; then
  # if NDEBUG is defined, assert() macros are removed at compile time.
  append_to_config_h '#define NDEBUG 1'
fi

if $include_compat_h; then
  echo '#include "compat.h"' >> "$config_h_path"
fi

show_config
