.\"	$Id: mdl.1,v 1.32 2016/09/25 20:09:06 je Exp $
.\"
.\" Copyright (c) 2015, 2016 Juha Erkkilä <je@turnipsi.no-ip.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.\" The following requests are required for all man pages.
.\"
.Dd $Mdocdate: September 25 2016 $
.Dt MDL 1
.Os
.Sh NAME
.Nm mdl
.Nd a music description language with a MIDI sequencer
.Sh SYNOPSIS
.Nm mdl
.Op Fl cnsv
.Op Fl d Ar debuglevel
.Op Fl f Ar device
.Op Fl m Ar MIDI-interface
.Op Ar
.Sh DESCRIPTION
.Nm
interprets music files
and plays them through a MIDI device.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl c
Force a client mode.
.Nm
normally connects to a server,
but if that fails then it falls back to standalone mode.
However, with
.Fl c
option
.Nm
exits with error if connecting to a server fails.
.It Fl d Ar debuglevel
Set
.Ar debuglevel
to some value.
Supported values are numbers from from 1 to 4,
where a bigger number means
more detailed debugging messages are printed.
Other possible values are
.Cm all ,
.Cm clock ,
.Cm exprconv ,
.Cm functions ,
.Cm ipc ,
.Cm joins ,
.Cm midi ,
.Cm midistream ,
.Cm mm ,
.Cm parsing ,
.Cm process ,
.Cm relative ,
.Cm seq
and
.Cm song .
Several options may be set by separating them with a comma,
for example
.Dq joins,midi .
Using the option
.Dq all
turns on all options.
.It Fl f Ar device
Sets the MIDI device path.
Interpretation for this depends on the MIDI-interface used.
For
.Cm raw
MIDI devices this the file path with the default value of
.Dq /dev/rmidi0 .
For
.Cm sndio
MIDI devices this is the name of the
.Xr sndio 7
MIDI device with the default value of
.Dq default .
See the
.Fl m
option for setting the MIDI-interface type.
.It Fl m Ar MIDI-interface
Set the
.Ar MIDI-Interface
type
.Nm
uses.
Possible values are
.Cm raw
and
.Cm sndio ,
but not all options may have been compiled in.
See the
.Ar -v
option for supported MIDI-interfaces
and the default MIDI-interface type used.
.It Fl n
Dry run.
Do most things except do not actually play music
or establish any server connections
(implies the
.Fl s
option).
.It Fl s
Run
.Nm
in standalone mode,
in which it does not connect to a server,
but manages interpreter and sequencer subprocesses by itself.
.It Fl v
Show
.Nm
version and the supported MIDI interfaces
.Nm
was compiled with.
.El
.Sh SYNTAX AND SEMANTICS
.Nm
interprets files or standard input written in the
.Nm
language.
The language describes notes
that trigger midi events played by a sequencer.
Syntax and semantics are very similar to those used in the
.Xr lilypond 1
music typesetting program,
but they are not compatible.
.Pp
The currently implemented language interpreter supports
notes and rest with various lengths,
drum hits,
chord expressions,
joining expressions,
simultaneous playing of different music expressions
and different instruments on different midi channels.
Changing global tempo
and track-specific instrument volume is also possible.
.Pp
Whitespace is generally ignored,
but may be meaningful in some details.
.Pp
.Em Notes
are expressed as
.Em letters ,
which are:
.Ql c ,
.Ql d ,
.Ql e ,
.Ql f ,
.Ql g ,
.Ql a
and
.Ql b .
To play the major
.Ql c
scale upwards from middle
.Ql c
(midi note 60) to higher
.Ql c
(midi note 72) one can write:
.Bd -literal -offset indent
c d e f g a b c
.Ed
.Pp
To play scale downwards from middle
.Ql c
(midi note 60) to lower
.Ql c
(midi note 48) one can write:
.Bd -literal -offset indent
c b a g f e d c
.Ed
.Pp
Note that in these examples
the same letter can mean different notes,
for example
.Ql c
can mean middle
.Ql c
(midi note 60),
higher
.Ql c
(midi note 72),
or lower
.Ql c
(midi note 48),
depending on note position in relation to other notes.
This is because the actual note chosen
\(em regarding on which octave to play \(em
depends on previous notes.
If the note letter is the same as previous,
the same note is played,
otherwise a choice must be made
between higher and lower note.
.Nm
chooses to play the note
that is closer to the previous note,
when comparing distances between note letters.
Note letters are considered like a circular list,
thus
.Ql b
is closer to
.Ql c
than
.Ql e .
For example:
.Bl -column "XXXX" -offset indent
.It Li c d Ta The chosen
.Ql d
is the
.Em higher
one, because the distance from
.Ql c
to higher
.Ql d
is 1 (c-d),
which is less than the distance to lower
.Ql d ,
which is 6 (c-b-a-g-f-e-d).
In case
.Ql c
was interpreted as midi note 60,
the
.Ql d
that corresponds to midi note 62 is played.
.It
.It Li e b Ta The chosen
.Ql b
is the
.Em lower
one, because the distance from
.Ql e
to lower
.Ql b
is 3 (e-d-c-b),
which is less than the distance to higher
.Ql b ,
which is 4 (e-f-g-a-b).
In case
.Ql e
was interpreted as midi note 76,
the
.Ql b
that corresponds to midi note 71 is played.
.It
.It Li c g Ta The chosen
.Ql g
is the
.Em lower
one, because the distance from
.Ql c
to lower
.Ql g
is 3 (c-b-a-g),
which is less than the distance to higher
.Ql g ,
which is 4 (c-d-e-f-g).
In case
.Ql c
was interpreted as midi note 60,
the
.Ql g
that corresponds to midi note 55 is played.
.It
.It Li f b Ta The chosen
.Ql b
is the
.Em higher
one, because the distance from
.Ql f
to higher
.Ql b
is 3 (f-g-a-b),
which is less than the distance to lower
.Ql b ,
which is 4 (f-e-d-c-b).
In case
.Ql f
was interpreted as midi note 53,
the
.Ql b
that corresponds to midi note 47 is played.
.El
.Pp
Note that in the last example both the higher
.Ql b
and the lower
.Ql b
are at a distance of 6 semitones from
.Ql f .
This does not matter
as the above method is unambiguous
in resolving the played note.
.Pp
The first note in a sequence
is compared with the middle
.Ql c
(midi note 60),
that is kind-of a
.Dq default note
in a sequence.
.Pp
In cases where the above method
chooses the wrong note,
this can be affected by
.Em octave modifiers
that force the note to be an octave higher or lower.
Appending
.Ql '
(an apostrophe) to note letter raises the note by one octave,
and appending
.Ql ","
(a comma) to note letter lowers the note by one octave.
Multiple apostrophes and commas can be appended to note letters,
forcing jumps of multiple octaves.
For example, the following snippet plays the midi notes 62,
69, 67, 60 and 86:
.Bd -literal -offset indent
d a' g c, d''
.Ed
.Pp
Considering those notes one by one:
.Bl -column "XX" -offset indent
.It Li d Ta The higher
.Ql d
(62) is closer to
.Ql c
than the lower (50).
.It Li a' Ta The lower
.Ql a
(57) is closer, but move up an octave to 69.
.It Li g Ta The lower
.Ql g
is closer (midi note 67).
.It Li c, Ta The higher
.Ql c
(72) is closer, but move down an octave to 60.
.It Li d'' Ta Play
.Ql d
again, except move up by two octaves (86).
.El
.Pp
Notes can be modified with
.Em note modifiers .
They can be made
.Dq sharp
by appending
.Ql is ,
and they can also be made
.Dq flat
by appending
.Ql es
after the note letter,
but before octave modifiers.
That is,
.Ql fis
means sharp
.Ql f
(raising
.Ql f
by one semitone), and
.Ql aes
means flat
.Ql a
(lowering
.Ql a
by one semitone).
To get a flat
.Ql e ,
both
.Ql es
and
.Ql ees
can be used.
.Pp
It is possible, but not recommended,
to put whitespace between note,
note modifiers and octave modifiers,
but note that
.Ql es
may be parsed as a note or a note modifier.
For example,
.Dq "c is ,"
is a syntactically correct, single-note expression,
but
.Dq "c es"
and
.Dq "ces"
mean different things and here whitespace matters.
.Pp
Note modifiers do not affect
the note octave resolution method at all.
Consider the following case:
.Bd -literal -offset indent
cis ges
.Ed
.Pp
Here, if
.Ql cis
means midi note 61,
then even though the higher
.Ql ges
(midi note 66) is closer to
.Ql cis
than the lower
.Ql ges
(midi note 54),
the lower
.Ql ges
is chosen, because the lower
.Ql g
is closer to
.Ql c
than the higher
.Ql g ,
as outlined above.
Here, if the higher
.Ql ges
was intended,
the example can be written as:
.Bd -literal -offset indent
cis ges'
.Ed
.Pp
Modifiers can be applied many times,
thus the following equivalences are true:
.Bl -column "X" -offset indent
.It Li "cisis   = d"
.It Li "fisisis = gis"
.It Li "aises   = a"
.El
.Pp
Note
.Em lengths
are expressed with
.Em numbers
that follow notes, where number
.Ql n
means to play a note for 1/n measures.
This means that to play note
.Ql c
for 1/8 measures, one should write
.Ql c8 ,
and when
.Nm
reads
.Ql e12 ,
it interprets that to mean note
.Ql e
should be played for 1/12 measures.
.Pp
Note lengths may be extended with zero or more
.Em dots
.Ql ( \&. ) .
Each new dot extends the length by
.Ql 1/(2^n) ,
where
.Ql n
is the dot count.
For example:
.Bl -column "XXXXX" -offset indent
.It Li "c4"     Ta "1/4 measures"
.It Li "c4."    Ta "1/4 + 1/8 = 3/8 measures"
.It Li "c4.."   Ta "1/4 + 1/8 + 1/16 = 7/16 measures"
.It Li "c4..."  Ta "1/4 + 1/8 + 1/16 + 1/32 = 15/32 measures"
.It Li "c4...." Ta "1/4 + 1/8 + 1/16 + 1/32 + 1/64 = 31/64 measures"
.El
.Pp
In case a length specification (some number with dots) is missing,
the length of the previous note is used.
In case the first note of a sequence has no length specification,
quarter-note is the note length.  For example:
.Bd -literal -offset indent
c d e2  f4 g a2
.Ed
.Pp
Here
.Ql c ,
.Ql d ,
.Ql f
and
.Ql g
are quarter-notes (length 1/4),
and
.Ql e
and
.Ql a
are half-notes (length 1/2).
.Pp
.Em Rests
are also supported.
Instead of a letter depicting a note,
a letter
.Ql r
is used.
Length specifications can be applied to rests
just as with notes and chords,
and these affect the lengths of subsequent
music expressions unless they explicitly
specify their length,
just like is the case with notes.
The following example contains rests of length 1/4 and 1/8:
.Bd -literal -offset indent
c4 e    r g   r8 f e d   r e d c
.Ed
.Pp
Notes can be grouped as
.Em sequences
with
.Ql {
and
.Ql } .
Thus the following two expressions are equivalent:
.Bl -column "XXXXXXXXXXXXXXXXXXXXX" -offset indent
.It Li "c4 g'8 f" Ta "{ c4 g'8 f }"
.El
.Pp
This in itself accomplishes nothing,
but each sequence is an independent expression,
which is not affected by previous notes or their lengths,
and do not affect subsequent expressions.
Thus, the following two expressions are equivalent:
.Bl -column "XXXXXXXXXXXXXXXXXXXXX" -offset indent
.It Li "c8 e g {c} g e c" Ta "c8 e g c,4 g'8 e c"
.El
.Pp
Previous length specifiers do not affect sequence length
nor the lengths of its subexpressions,
but in case a sequence has a length specifier appended,
the whole sequence expression is scaled to that specific length.
Try the following example:
.Bd -literal -offset indent
c4 e   {d f d}4   {e g e}4
.Ed
.Pp
In this case this length also affects subsequent music expressions,
except for sequences and simultences (see below).
.Pp
Sequences can also contain other sequences
and music expressions.
Music expressions (such as notes and sequences)
can also be grouped as
.Em simultences ,
which are another kind of a music expression.
Simultence is like a sequence except that
all subexpressions of it are played simultaneously,
not sequentially as is the case with sequences.
.Dq ( Simultence
is not common terminology,
but it is handy to have a word for such a thing,
and it seems like a fitting word).
Simultences are expressed with
.Ql <<
and
.Ql >> ,
for example:
.Bd -literal -offset indent
<< c e g c' >>
.Ed
.Pp
This plays a major
.Ql c
chord, with middle
.Ql c ,
.Ql e ,
.Ql g
and the higher
.Ql c .
Subexpressions of a simultence are not affected
by any previous expressions or each other,
and they do not affect subsequent music expressions.
Thus, the
.Dq default note
for each of them is the quarter-note middle
.Ql c ,
as is the case with sequences.
.Pp
One common way to play music
is to combine sequences with simultences
in the following way.
To play two sequences simultaneously one can write:
.Bd -literal -offset indent
<<
  { c    d     f   g     a   c     g   c,  }
  { c8 c c c   e e e e   g g g g   c c c c }
>>
.Ed
.Pp
Simultences can also have a length specifier appended,
in which case the whole simultence is scaled to that specific length.
As with sequences,
this length also affects subsequent music expressions,
except for sequences and other simultences.
.Pp
Another expression type is a relative simultence,
or
.Em relsimultence
for short.
.\" XXX Should it have a better name?  Does it need a name?
It is like a simultence in that it has subexpressions
which are played simultaneously.
However, these subexpressions are parsed like sequences,
meaning that the notes may affect each others'
lengths and chosen octaves.
The subexpressions for relsimultences are enclosed with
.Ql <
and
.Ql > ,
with an optional length specifier appended.
.\" XXX Should appending a length specifier be possible case
.\" XXX with sequences and simultences as well?
The syntax is handy for expressing multiple simultaneous notes,
for example the following expression can be used
to play a major
.Ql c
chord for a time of 1/8 measures:
.Bd -literal -offset indent
<c e g>8
.Ed
.Pp
The subexpressions of a relsimultence
can be any music expressions
and they are scaled according to the length specifier,
or the previously used note length if none were specified.
If subexpressions have differing lengths,
the longest subexpression is scaled to the specified length,
and other subexpressions are scaled with the same scaling factor.
.Pp
Another type of music expression
(which can of course be a part of a sequence, simultence
or relsimultence)
is a
.Em chord ,
that is written by appending
.Ql \&:
and a chord identifier to a note.
The chosen note functions as the base note for a chord.
The following chord identifiers are supported by
.Nm mdl ,
with the identifier on the left
and the corresponding relsimultence expression on the right:
.Bl -column "XXXXXXXXXXX" -offset indent
.It Li "c:5"        Ta "< c e  g              >"
.It Li "c:m"        Ta "< c es g              >"
.It Li "c:m5"       Ta "< c es g              >"
.It Li "c:aug"      Ta "< c e  gis            >"
.It Li "c:dim"      Ta "< c es ges            >"
.It Li "c:7"        Ta "< c e  g   bes        >"
.It Li "c:maj7"     Ta "< c e  g   b          >"
.It Li "c:maj"      Ta "< c e  g   b          >"
.It Li "c:m7"       Ta "< c es g   bes        >"
.It Li "c:dim7"     Ta "< c es ges beses      >"
.It Li "c:aug7"     Ta "< c e  gis bes        >"
.It Li "c:m7.5-"    Ta "< c es ges bes        >"
.It Li "c:m7+"      Ta "< c es g   b          >"
.It Li "c:6"        Ta "< c e  g   a          >"
.It Li "c:m6"       Ta "< c es g   a          >"
.It Li "c:9"        Ta "< c e  g   bes d      >"
.It Li "c:maj9"     Ta "< c e  g   b   d      >"
.It Li "c:m9"       Ta "< c es g   bes d      >"
.It Li "c:11"       Ta "< c e  g   bes d f    >"
.It Li "c:maj11"    Ta "< c e  g   b   d f    >"
.It Li "c:m11"      Ta "< c es g   bes d f    >"
.It Li "c:13"       Ta "< c e  g   bes d   a' >"
.It Li "c:13.11"    Ta "< c e  g   bes d f a  >"
.It Li "c:maj13.11" Ta "< c e  g   b   d f a  >"
.It Li "c:m13.11"   Ta "< c es g   bes d f a  >"
.It Li "c:sus2"     Ta "< c d  g              >"
.It Li "c:sus4"     Ta "< c f  g              >"
.It Li "c:1.5"      Ta "< c    g              >"
.It Li "c:1.5.8"    Ta "< c    g   c          >"
.El
.Pp
In case the identifier is left out and only
.Ql \&:
is used,
the chord that has been previously played is chosen,
or in case there is no such a chord,
.Ql :5
is used.
The base note of the chord follows
the same rules as notes
regarding note modifiers, octave modifiers and lengths,
and these affect other notes of the chord as well.
For example, the following expressions on the left
are valid chord expressions
and are equivalent to relsimultence expressions
on the right:
.Bl -column "XXXXXXXXXXXXX" -offset indent
.It Li cis'2:maj     Ta "<cis' f gis c>2"
.It Li es,4..:m13.11 Ta "<es, ges bes des f aes c>4.."
.It Li a16.:maj9     Ta "<a cis e gis b>16."
.It Li g:            Ta "<g b d> (in case previous chord was :5)"
.El
.Pp
It is also possible to use
.Em drum hit expressions
instead of notes.
Drum hits are like rests in that
note modifiers and octave modifiers can not be used,
but length specifiers can be used
like with notes, rests, chords and relsimultences.
Supported drum names and their longer counterparts are:
.Bl -column "XXX" "XXXXXXXXXXXXXXXXXXXX" "XXX" -offset indent
.It Li bda   Ta acousticbassdrum Ta bohm  Ta mutehibongo
.It Li bd    Ta bassdrum         Ta boh   Ta hibongo
.It Li ssh   Ta hisidestick      Ta boho  Ta openhibongo
.It Li ss    Ta sidestick        Ta bolm  Ta mutelobongo
.It Li ssl   Ta losidestick      Ta bol   Ta lobongo
.It Li sna   Ta acousticsnare    Ta bolo  Ta openlobongo
.It Li sn    Ta snare            Ta cghm  Ta mutehiconga
.It Li hc    Ta handclap         Ta cglm  Ta muteloconga
.It Li sne   Ta electricsnare    Ta cgho  Ta openhiconga
.It Li tomfl Ta lowfloortom      Ta cgh   Ta hiconga
.It Li hhc   Ta closedhihat      Ta cglo  Ta openloconga
.It Li hh    Ta hihat            Ta cgl   Ta loconga
.It Li tomfh Ta highfloortom     Ta timh  Ta hitimbale
.It Li hhp   Ta pedalhihat       Ta timl  Ta lotimbale
.It Li toml  Ta lowtom           Ta agh   Ta hiagogo
.It Li hho   Ta openhihat        Ta agl   Ta loagogo
.It Li hhho  Ta halfopenhihat    Ta cab   Ta cabasa
.It Li tomml Ta lowmidtom        Ta mar   Ta maracas
.It Li tommh Ta himidtom         Ta whs   Ta shortwhistle
.It Li cymca Ta crashcymbala     Ta whl   Ta longwhistle
.It Li cymc  Ta crashcymbal      Ta guis  Ta shortguiro
.It Li tomh  Ta hightom          Ta guil  Ta longguiro
.It Li cymra Ta ridecymbala      Ta gui   Ta guiro
.It Li cymr  Ta ridecymbal       Ta cl    Ta claves
.It Li cymch Ta chinesecymbal    Ta wbh   Ta hiwoodblock
.It Li rb    Ta ridebell         Ta wbl   Ta lowoodblock
.It Li tamb  Ta tambourine       Ta cuim  Ta mutecuica
.It Li cyms  Ta splashcymbal     Ta cuio  Ta opencuica
.It Li cb    Ta cowbell          Ta trim  Ta mutetriangle
.It Li cymcb Ta crashcymbalb     Ta tri   Ta triangle
.It Li vibs  Ta vibraslap        Ta trio  Ta opentriangle
.It Li cymrb Ta ridecymbalb
.El
.Pp
For example, to play a drum beat with bass drums,
snare drums and hihats
one can use the following expression.
.Bd -literal -offset indent
<<
  { bassdrum4      snare        bd8   bd     sn4    }
  { hh16 hh hh hh  hh hh hh hh  hh hh hh hh  hh8 hh }
>>
.Ed
.Pp
As usually, whitespace does not matter here,
but it may be nice to line up expressions
that are played at the exact same time.
.Pp
Music expressions can be
.Em joined
together with
.Ql ~
syntax (XXX buggy!).
When music expressions are joined,
notes which are playing at the end of the previous expression
are not turned off
in case the following expression starts
with those notes.
This allows for expressing music expressions that have lengths
that are not otherwise expressible
with simple length specifiers (numbers and dots).
Some examples:
.Bl -column -offset indent
.It Li "c2 ~ c8 d e f"
.It Li "c8 d e r ~ r g e c4"
.It Li "tomfl8 tomfl tomfl tomfl ~ tomfl4. tomfl8"
.It Li "c ~ d"
.It Li "c4.:5 ~ e8:m7 ~ e4:7 ~ gis"
.El
.Pp
The last example joins together chords and a
.Ql gis
note at the end,
joining the common notes while others
turn on and off as required.
Trying to join unjoinable expressions is possible
(as in
.Dq c ~ d ) ,
joining simply fails and notes remain distinct.
.Pp
Music expressions can be assigned to
.Em tracks 
with track syntax:
.Bd -literal -offset indent
"track name" :: SOME_MUSIC_EXPRESSION
.Ed
.Pp
Actually all music expressions belong to some track
even if they are not explicitly assigned to any.
The default track for notes is
.Dq acoustic grand ,
and
.Dq drums
for drum hits.
Tracks have their own parameters
such as the instrument used and the volume level,
and these can be changed independently for each track.
Tracks have their own midi channels.
(These are in fact allocated dynamically
so that they may change,
but this should not matter as all track-specific settings
should always follow to the new midi channel).
.Pp
Track name can be anything made of letters, numbers and space.
If there is an instrument name recognized by
.Nm
that matches the track name exactly,
that instrument will be used on the track
and no other instrument specification is needed.
Here is an example that plays a few notes with a drawbar organ:
.Bd -literal -offset indent
"drawbar organ" :: { c c c e   d d d f   e e d d   c1 }
.Ed
.Pp
Multiple track specifications with the same name
simply use the same track
and do not create multiple tracks.
.Pp
.Nm
also supports
.Em functions .
Function syntax is:
.Bd -literal -offset indent
\\function_name funcarg1 funcarg2 ... ;
.Ed
.Pp
The last
.Ql \&;
can be omitted in case
a newline ends the argument list.
Function call can be also continued to the next line by using
.Ql \\\\
(a backslash) at the end of the line.
.Pp
Currently supported functions are
.Ic \\\\instrument
(XXX not yet),
.Ic \\\\tempo 
and
.Ic \\\\volume . 
To change an instrument in a track do (XXX not yet):
.Bd -literal -offset indent
\\instrument "instrument name";
.Ed
.Pp
Recognized instrument names for toned instruments are:
.Bl -column "XXXXXXXXXXXXXXXXXXXXXXXXXX" -offset indent
.It Li "acoustic grand"          Ta "soprano sax"
.It Li "bright acoustic"         Ta "alto sax"
.It Li "electric grand"          Ta "tenor sax"
.It Li "honky-tonk"              Ta "baritone sax"
.It Li "electric piano 1"        Ta "oboe"
.It Li "electric piano 2"        Ta "english horn"
.It Li "harpsichord"             Ta "bassoon"
.It Li "clav"                    Ta "clarinet"
.It
.It Li "celesta"                 Ta "piccolo"
.It Li "glockenspiel"            Ta "flute"
.It Li "music box"               Ta "recorder"
.It Li "vibraphone"              Ta "pan flute"
.It Li "marimba"                 Ta "blown bottle"
.It Li "xylophone"               Ta "shakuhachi"
.It Li "tubular bells"           Ta "whistle"
.It Li "dulcimer"                Ta "ocarina"
.It
.It Li "drawbar organ"           Ta "lead 1 (square)"
.It Li "percussive organ"        Ta "lead 2 (sawtooth)"
.It Li "rock organ"              Ta "lead 3 (calliope)"
.It Li "church organ"            Ta "lead 4 (chiff)"
.It Li "reed organ"              Ta "lead 5 (charang)"
.It Li "accordion"               Ta "lead 6 (voice)"
.It Li "harmonica"               Ta "lead 7 (fifths)"
.It Li "concertina"              Ta "lead 8 (bass+lead)"
.It
.It Li "acoustic guitar (nylon)" Ta "pad 1 (new age)"
.It Li "acoustic guitar (steel)" Ta "pad 2 (warm)"
.It Li "electric guitar (jazz)"  Ta "pad 3 (polysynth)"
.It Li "electric guitar (clean)" Ta "pad 4 (choir)"
.It Li "electric guitar (muted)" Ta "pad 5 (bowed)"
.It Li "overdriven guitar"       Ta "pad 6 (metallic)"
.It Li "distorted guitar"        Ta "pad 7 (halo)"
.It Li "guitar harmonics"        Ta "pad 8 (sweep)"
.It
.It Li "acoustic bass"           Ta "fx 1 (rain)"
.It Li "electric bass (finger)"  Ta "fx 2 (soundtrack)"
.It Li "electric bass (pick)"    Ta "fx 3 (crystal)"
.It Li "fretless bass"           Ta "fx 4 (atmosphere)"
.It Li "slap bass 1"             Ta "fx 5 (brightness)"
.It Li "slap bass 2"             Ta "fx 6 (goblins)"
.It Li "synth bass 1"            Ta "fx 7 (echoes)"
.It Li "synth bass 2"            Ta "fx 8 (sci-fi)"
.It
.It Li "violin"                  Ta "sitar"
.It Li "viola"                   Ta "banjo"
.It Li "cello"                   Ta "shamisen"
.It Li "contrabass"              Ta "koto"
.It Li "tremolo strings"         Ta "kalimba"
.It Li "pizzicato strings"       Ta "bagpipe"
.It Li "orchestral harp"         Ta "fiddle"
.It Li "timpani"                 Ta "shanai"
.It
.It Li "string ensemble 1"       Ta "tinkle bell"
.It Li "string ensemble 2"       Ta "agogo"
.It Li "synthstrings 1"          Ta "steel drums"
.It Li "synthstrings 2"          Ta "woodblock"
.It Li "choir aahs"              Ta "taiko drum"
.It Li "voice oohs"              Ta "melodic tom"
.It Li "synth voice"             Ta "synth drum"
.It Li "orchestra hit"           Ta "reverse cymbal"
.It
.It Li "trumpet"                 Ta "guitar fret noise"
.It Li "trombone"                Ta "breath noise"
.It Li "tuba"                    Ta "seashore"
.It Li "muted trumpet"           Ta "bird tweet"
.It Li "french horn"             Ta "telephone ring"
.It Li "brass section"           Ta "helicopter"
.It Li "synthbrass 1"            Ta "applause"
.It Li "synthbrass 2"            Ta "gunshot"
.El
.Pp
Recognized instrument names for drumkits are
(setting this affects all the drum sounds (XXX does this work?)):
.Bl -column "XXXXXXXXXXXXXXXXXXXXXXXXXX" -offset indent
.It Li "drums"            Ta "jazz kit"
.It Li "standard drums"   Ta "brush drums"
.It Li "standard kit"     Ta "brush kit"
.It Li "room drums"       Ta "classical drums"
.It Li "room kit"         Ta "orchestra drums"
.It Li "power drums"      Ta "orchestra kit"
.It Li "power kit"        Ta "sfx drums"
.It Li "rock drums"       Ta "sfx kit"
.It Li "electronic drums" Ta "cm-64 drums"
.It Li "electronic kit"   Ta "cm-64 kit"
.It Li "tr-808 drums"     Ta "mt-32 drums"
.It Li "tr-808 kit"       Ta "mt-32 kit"
.It Li "jazz drums"
.El
.Pp
To change volume on a track do:
.Bd -literal -offset indent
\\\\volume VOLUME;
.Ed
.Pp
Here VOLUME must be some value between 0 and 127.
.Pp
To change tempo (this can be anywhere but affects all tracks) do:
.Bd -literal -offset indent
\\\\tempo BPM;
.Ed
.Pp
Here BPM means beats-per-minute
and must be a value between 1 and
.Dv LLONG_MAX
(a big number).
.\" .Sh ENVIRONMENT
.\" For sections 1, 6, 7, and 8 only.
.Sh EXIT STATUS
The
.Nm
utility exits 0 on success, and >0 if an error occurs.
.Sh EXAMPLES
Play a major scale from middle
.Ql c
to higher
.Ql c
using quarter notes:
.Bd -literal -offset indent
c4 d e f g a b c
.Ed
.\" .Sh DIAGNOSTICS
.\" For sections 1, 4, 6, 7, 8, and 9 printf/stderr messages only.
.Sh SEE ALSO
.Xr lilypond 1
.\" .Sh STANDARDS
.\" .Sh HISTORY
.Sh AUTHORS
.An Juha Erkkilä Aq Mt je@turnipsi.no-ip.org
.\" .Sh CAVEATS
.Sh BUGS
On
.Fx 10.3
(the only tested
.Fx
release),
.Nm
sometimes exits with an error for some unknown reason.
.Pp
The parser does not suggest where parsing fails or why.
.Pp
Drum handling is strange and lacking,
for example drum volumes can not be adjusted.
.Pp
The note joining code is buggy
and should be moved to sequencer
and implemented differently.
For example, the following syntax
produces either an assertion crash
or sometimes a hang:
.Bd -literal -offset indent
<<c>> ~ {a}
.Ed
.Pp
MIDI channel limitation of 16 channels
means that only 15 toned instrument tracks
and one drum track can be simultaneously active
(playing notes at the same time).
.Pp
.Ic \\\\instrument
function to set an instrument for a track
is not yet implemented.
.Pp
Many others probably, but most seriously
.Nm
is lacking features that a programming language should have,
such as variables, user-definable functions and such.
The current plan is to integrate with Tcl
that should provide some of that functionality.
