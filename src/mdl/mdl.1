.\"	$Id: mdl.1,v 1.22 2016/09/23 19:24:42 je Exp $
.\"
.\" Copyright (c) 2015, 2016 Juha Erkkilä <je@turnipsi.no-ip.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.\" The following requests are required for all man pages.
.\"
.Dd $Mdocdate: September 23 2016 $
.Dt MDL 1
.Os
.Sh NAME
.Nm mdl
.Nd a music description language with a MIDI sequencer
.Sh SYNOPSIS
.Nm mdl
.Op Fl cnsv
.Op Fl d Ar debuglevel
.Op Fl f Ar device
.Op Fl m Ar MIDI-interface
.Op Ar
.Sh DESCRIPTION
.Nm
interprets music files
and plays them through a MIDI device.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl c
Force a client mode.
.Nm
normally connects to a server,
but if that fails then it falls back to standalone mode.
However, with
.Fl c
option
.Nm
exits with error if connecting to a server fails.
.It Fl d Ar debuglevel
Set
.Ar debuglevel
to some value.
Supported values are numbers from from 0 to 4,
where a bigger number means
more detailed debugging messages are printed.
Other possible values are
.Cm clock ,
.Cm exprconv ,
.Cm functions ,
.Cm ipc ,
.Cm joins ,
.Cm midi ,
.Cm midistream ,
.Cm mm ,
.Cm parsing ,
.Cm process ,
.Cm relative ,
.Cm seq
and
.Cm song .
Several options may be set by separating them with a comma,
for example
.Dq joins,midi .
.It Fl f Ar device
Sets the MIDI device path.
Interpretation for this depends on the MIDI-interface used.
For
.Cm raw
MIDI devices this the file path with the default value of
.Dq /dev/rmidi0 .
For
.Cm sndio
MIDI devices this is the name of the
.Xr sndio 7
MIDI device with the default value of
.Dq default .
See the
.Fl m
option for setting the MIDI-interface type.
.It Fl m Ar MIDI-interface
Set the
.Ar MIDI-Interface
type
.Nm
uses.
Possible values are
.Cm raw
and
.Cm sndio ,
but not all options may have been compiled in.
See the
.Ar -v
option for supported MIDI-interfaces
and the default MIDI-interface type used.
.It Fl n
Dry run.
Do most things except do not actually play music
or establish any server connections
(implies the
.Fl s
option).
.It Fl s
Run
.Nm
in standalone mode,
in which it does not connect to a server,
but manages interpreter and sequencer subprocesses by itself.
.It Fl v
Show
.Nm
version and the supported MIDI interfaces
.Nm
was compiled with.
.El
.Sh SYNTAX AND SEMANTICS
.Nm
interprets files or standard input written in the
.Nm
language.
The language describes notes
that trigger midi events played by a sequencer.
Syntax and semantics are very similar to those used in the
.Xr lilypond 1
music typesetting program,
but they are not compatible.
.Pp
The currently implemented language interpreter supports
notes and rest with various lengths,
drum hits,
chord expressions,
joining expressions,
simultaneous playing of different music expressions
and different instruments on different midi channels.
Changing global tempo
and track-specific instrument volume is also possible.
.Pp
Whitespace is generally ignored,
but may be meaningful in some details.
.Pp
.Em Notes
are expressed as
.Em letters ,
which are:
.Ql c ,
.Ql d ,
.Ql e ,
.Ql f ,
.Ql g ,
.Ql a
and
.Ql b .
To play the major
.Ql c
scale upwards from middle
.Ql c
(midi note 60) to higher
.Ql c
(midi note 72) one can write:
.Bd -literal -offset indent
c d e f g a b c
.Ed
.Pp
To play scale downwards from middle
.Ql c
(midi note 60) to lower
.Ql c
(midi note 48) one can write:
.Bd -literal -offset indent
c b a g f e d c
.Ed
.Pp
Note that in these examples
the same letter can mean different notes,
for example
.Ql c
can mean middle
.Ql c
(midi note 60),
higher
.Ql c
(midi note 72),
or lower
.Ql c
(midi note 48),
depending on note position in relation to other notes.
This is because the actual note chosen
\(em regarding on which octave to play \(em
depends on previous notes.
If the note letter is the same as previous,
the same note is played,
otherwise a choice must be made
between higher and lower note.
.Nm
chooses to play the note
that is closer to the previous note,
when comparing distances between note letters.
Note letters are considered like a circular list,
thus
.Ql b
is closer to
.Ql c
than
.Ql e .
For example:
.Bl -column "XXXX" -offset indent
.It Li c d Ta The chosen
.Ql d
is the
.Em higher
one, because the distance from
.Ql c
to higher
.Ql d
is 1 (c-d),
which is less than the distance to lower
.Ql d ,
which is 6 (c-b-a-g-f-e-d).
In case
.Ql c
was interpreted as midi note 60,
the
.Ql d
that corresponds to midi note 62 is played.
.It
.It Li e b Ta The chosen
.Ql b
is the
.Em lower
one, because the distance from
.Ql e
to lower
.Ql b
is 3 (e-d-c-b),
which is less than the distance to higher
.Ql b ,
which is 4 (e-f-g-a-b).
In case
.Ql e
was interpreted as midi note 76,
the
.Ql b
that corresponds to midi note 71 is played.
.It
.It Li c g Ta The chosen
.Ql g
is the
.Em lower
one, because the distance from
.Ql c
to lower
.Ql g
is 3 (c-b-a-g),
which is less than the distance to higher
.Ql g ,
which is 4 (c-d-e-f-g).
In case
.Ql c
was interpreted as midi note 60,
the
.Ql g
that corresponds to midi note 55 is played.
.It
.It Li f b Ta The chosen
.Ql b
is the
.Em higher
one, because the distance from
.Ql f
to higher
.Ql b
is 3 (f-g-a-b),
which is less than the distance to lower
.Ql b ,
which is 4 (f-e-d-c-b).
In case
.Ql f
was interpreted as midi note 53,
the
.Ql b
that corresponds to midi note 47 is played.
.El
.Pp
Note that in the last example both the higher
.Ql b
and the lower
.Ql b
are at a distance of 6 semitones from
.Ql f .
This does not matter
as the above method is unambiguous
in resolving the played note.
.Pp
The first note in a sequence
is compared with the middle
.Ql c
(midi note 60),
that is kind-of a
.Dq default note
in a sequence.
.Pp
In cases where the above method
chooses the wrong note,
this can be affected by
.Em octave modifiers
that force the note to be an octave higher or lower.
Appending
.Ql '
(an apostrophe) to note letter raises the note by one octave,
and appending
.Ql ","
(a comma) to note letter lowers the note by one octave.
Multiple apostrophes and commas can be appended to note letters,
forcing jumps of multiple octaves.
For example, the following snippet plays the midi notes 62,
69, 67, 60 and 86:
.Bd -literal -offset indent
d a' g c, d''
.Ed
.Pp
Considering those notes one by one:
.Bl -column "XX" -offset indent
.It Li d Ta The higher
.Ql d
(62) is closer to
.Ql c
than the lower (50).
.It Li a' Ta The lower
.Ql a
(57) is closer, but move up an octave to 69.
.It Li g Ta The lower
.Ql g
is closer (midi note 67).
.It Li c, Ta The higher
.Ql c
(72) is closer, but move down an octave to 60.
.It Li d'' Ta Play
.Ql d
again, except move up by two octaves (86).
.El
.Pp
Notes can be modified with
.Em note modifiers .
They can be made
.Dq sharp
by appending
.Ql is ,
and they can also be made
.Dq flat
by appending
.Ql es
after the note letter,
but before octave modifiers.
That is,
.Ql fis
means sharp
.Ql f
(raising
.Ql f
by one semitone), and
.Ql aes
means flat
.Ql a
(lowering
.Ql a
by one semitone).
To get a flat
.Ql e ,
both
.Ql es
and
.Ql ees
can be used.
.Pp
It is possible, but not recommended,
to put whitespace between note,
note modifiers and octave modifiers,
but note that
.Ql es
may be parsed as a note or a note modifier.
For example,
.Dq "c is ,"
is a syntactically correct, single-note expression,
but
.Dq "c es"
and
.Dq "ces"
mean different things and here whitespace matters.
.Pp
Note modifiers do not affect
the note octave resolution method at all.
Consider the following case:
.Bd -literal -offset indent
cis ges
.Ed
.Pp
Here, if
.Ql cis
means midi note 61,
then even though the higher
.Ql ges
(midi note 66) is closer to
.Ql cis
than the lower
.Ql ges
(midi note 54),
the lower
.Ql ges
is chosen, because the lower
.Ql g
is closer to
.Ql c
than the higher
.Ql g ,
as outlined above.
Here, if the higher
.Ql ges
was intended,
the example can be written as:
.Bd -literal -offset indent
cis ges'
.Ed
.Pp
Modifiers can be applied many times,
thus the following equivalences are true:
.Bl -column "X" -offset indent
.It Li "cisis   = d"
.It Li "fisisis = gis"
.It Li "aises   = a"
.El
.Pp
Note
.Em lengths
are expressed with
.Em numbers
that follow notes, where number
.Ql n
means to play a note for 1/n measures.
This means that to play note
.Ql c
for 1/8 measures, one should write
.Ql c8 ,
and when
.Nm
reads
.Ql e12 ,
it interprets that to mean note
.Ql e
should be played for 1/12 measures.
.Pp
Note lengths may be extended with zero or more
.Em dots
.Ql ( \&. ) .
Each new dot extends the length by
.Ql 1/(2^n) ,
where
.Ql n
is the dot count.
For example:
.Bl -column "XXXXX" -offset indent
.It Li "c4"     Ta "1/4 measures"
.It Li "c4."    Ta "1/4 + 1/8 = 3/8 measures"
.It Li "c4.."   Ta "1/4 + 1/8 + 1/16 = 7/16 measures"
.It Li "c4..."  Ta "1/4 + 1/8 + 1/16 + 1/32 = 15/32 measures"
.It Li "c4...." Ta "1/4 + 1/8 + 1/16 + 1/32 + 1/64 = 31/64 measures"
.El
.Pp
In case a length specification (some number with dots) is missing,
the length of the previous note is used.
In case the first note of a sequence has no length specification,
quarter-note is the note length.  For example:
.Bd -literal -offset indent
c d e2  f4 g a2
.Ed
.Pp
Here
.Ql c ,
.Ql d ,
.Ql f
and
.Ql g
are quarter-notes (length 1/4),
and
.Ql e
and
.Ql a
are half-notes (length 1/2).
.Pp
.Em Rests
are also supported.
Instead of a letter depicting a note,
a letter
.Ql r
is used.
Length specifications can be applied to rests
just as with notes and chords,
and these affect the lengths of subsequent
music expressions unless they explicitly
specify their length,
just like is the case with notes.
The following example contains rests of length 1/4 and 1/8:
.Bd -literal -offset indent
c4 e    r g   r8 f e d   r e d c
.Ed
.Pp
Notes can be grouped as
.Em sequences
with
.Ql {
and
.Ql } .
Thus the following two expressions are equivalent:
.Bl -column "XXXXXXXXXXXXXXXXXXXXX" -offset indent
.It Li "c4 g'8 f" Ta "{ c4 g'8 f }"
.El
.Pp
This in itself accomplishes nothing,
but each sequence is an independent expression,
which is not affected by previous notes or their lengths,
and do not affect subsequent expressions.
Thus, the following two expressions are equivalent:
.Bl -column "XXXXXXXXXXXXXXXXXXXXX" -offset indent
.It Li "c8 e g {c} g e c" Ta "c8 e g c,4 g'8 e c"
.El
.Pp
Sequences can also contain other sequences
and music expressions.
Music expressions (such as notes and sequences)
can also be grouped as
.Em simultences ,
which are another kind of a music expression.
Simultence is like a sequence except that
all subexpressions of it are played simultaneously,
not sequentially as is the case with sequences.
.Dq ( Simultence
is not common terminology,
but it is handy to have a word for such a thing,
and it seems like a fitting word).
Simultences are expressed with
.Ql <<
and
.Ql >> ,
for example:
.Bd -literal -offset indent
<< c e g c' >>
.Ed
.Pp
This plays a major
.Ql c
chord, with middle
.Ql c ,
.Ql e ,
.Ql g
and the higher
.Ql c .
Subexpressions of a simultence are not affected
by any previous expressions or each other,
and they do not affect subsequent music expressions.
Thus, the
.Dq default note
for each of them is the quarter-note middle
.Ql c ,
as is the case with sequences.
.Pp
One common way to play music
is to combine sequences with simultences
in the following way.
To play two sequences simultaneously one can write:
.Bd -literal -offset indent
<<
  { c    d     f   g     a   c     g   c,  }
  { c8 c c c   e e e e   g g g g   c c c c }
>>
.Ed
.Pp
Another type of music expression
(which can of course be a part of a sequence or a simultence)
is a
.Em chord ,
that is written by appending
.Ql \&:
and a chord identifier to a note.
The note chosen functions as the base note for a chord.
The following chord identifiers are supported by
.Nm mdl ,
with the identifier on the left
and the corresponding simultence expression on the right:
.Bl -column "XXXXXXXXXXX" -offset indent
.It Li "c:5"        Ta "<< c e  g'                  >>"
.It Li "c:m"        Ta "<< c es g'                  >>"
.It Li "c:m5"       Ta "<< c es g'                  >>"
.It Li "c:aug"      Ta "<< c e  gis'                >>"
.It Li "c:dim"      Ta "<< c es ges'                >>"
.It Li "c:7"        Ta "<< c e  g'   bes'           >>"
.It Li "c:maj7"     Ta "<< c e  g'   b'             >>"
.It Li "c:maj"      Ta "<< c e  g'   b'             >>"
.It Li "c:m7"       Ta "<< c es g'   bes'           >>"
.It Li "c:dim7"     Ta "<< c es ges' beses'         >>"
.It Li "c:aug7"     Ta "<< c e  gis' bes'           >>"
.It Li "c:m7.5-"    Ta "<< c es ges' bes'           >>"
.It Li "c:m7+"      Ta "<< c es g'   b'             >>"
.It Li "c:6"        Ta "<< c e  g'   a'             >>"
.It Li "c:m6"       Ta "<< c es g'   a'             >>"
.It Li "c:9"        Ta "<< c e  g'   bes' d'        >>"
.It Li "c:maj9"     Ta "<< c e  g'   b'   d'        >>"
.It Li "c:m9"       Ta "<< c es g'   bes' d'        >>"
.It Li "c:11"       Ta "<< c e  g'   bes' d' f'     >>"
.It Li "c:maj11"    Ta "<< c e  g'   b'   d' f'     >>"
.It Li "c:m11"      Ta "<< c es g'   bes' d' f'     >>"
.It Li "c:13"       Ta "<< c e  g'   bes' d'    a'' >>"
.It Li "c:13.11"    Ta "<< c e  g'   bes' d' f' a'' >>"
.It Li "c:maj13.11" Ta "<< c e  g'   b'   d' f' a'' >>"
.It Li "c:m13.11"   Ta "<< c es g'   bes' d' f' a'' >>"
.It Li "c:sus2"     Ta "<< c d  g'                  >>"
.It Li "c:sus4"     Ta "<< c f  g'                  >>"
.It Li "c:1.5"      Ta "<< c    g'                  >>"
.It Li "c:1.5.8"    Ta "<< c    g'   c'             >>"
.El
.Pp
In case the identifier is left out and only
.Ql \&:
is used,
the chord that has been previously played is chosen,
or in case there is no such a chord,
.Ql :5
is used.
The base note of the chord follows
the same rules as notes
regarding note modifiers, octave modifiers and lengths,
and these affect other notes of the chord as well.
For example, the following expressions are valid chord expressions:
.Bl -column -offset indent
.It Li cis'2:maj
.It Li es,4..:m13.11
.It Li a16.:maj9
.It Li g:
.El
.\" .Sh ENVIRONMENT
.\" For sections 1, 6, 7, and 8 only.
.Sh EXIT STATUS
The
.Nm
utility exits 0 on success, and >0 if an error occurs.
.Sh EXAMPLES
Play a major scale from middle
.Ql c
to higher
.Ql c
using quarter notes:
.Bd -literal -offset indent
c4 d e f g a b c
.Ed
.Pp
Play some drumbeats, with bass drum, snare and steady hihat hits.
.Bd -literal -offset indent
<<
  { bd4            sn           bd8   bd     sd4         }
  { hh16 hh hh hh  hh hh hh hh  hh hh hh hh  hh hh hh hh }
>>
.Ed
.\" .Sh DIAGNOSTICS
.\" For sections 1, 4, 6, 7, 8, and 9 printf/stderr messages only.
.Sh SEE ALSO
.Xr lilypond 1
.\" .Sh STANDARDS
.\" .Sh HISTORY
.Sh AUTHORS
.An Juha Erkkilä Aq Mt je@turnipsi.no-ip.org
.\" .Sh CAVEATS
.Sh BUGS
On
.Fx ,
.Nm
sometimes exits with an error for some unknown reason.
.Pp
Parser does not suggest where parsing fails or why.
.Pp
Empty sequences and simultences are syntax errors,
this should not be.
.Pp
Drum handling is strange and lacking, for example drum volumes
can not be adjusted.
.Pp
Many others probably, but the most serious one is that
.Nm
is lacking features that a programming language should have,
such as variables, functions and such.
The current plan is to integrate with Tcl
that should provide some of that functionality.
