.\"	$Id: mdl.1,v 1.15 2016/09/23 10:08:41 je Exp $
.\"
.\" Copyright (c) 2015, 2016 Juha Erkkilä <je@turnipsi.no-ip.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.\" The following requests are required for all man pages.
.\"
.Dd $Mdocdate: September 23 2016 $
.Dt MDL 1
.Os
.Sh NAME
.Nm mdl
.Nd a music description language with a MIDI sequencer
.Sh SYNOPSIS
.Nm mdl
.Op Fl cnsv
.Op Fl d Ar debuglevel
.Op Fl f Ar device
.Op Fl m Ar MIDI-interface
.Op Ar
.Sh DESCRIPTION
.Nm
interprets music files
and plays them through a MIDI device.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl c
Force a client mode.
.Nm
normally connects to a server,
but if that fails then it falls back to standalone mode.
However, with
.Fl c
option
.Nm
exits with error if connecting to a server fails.
.It Fl d Ar debuglevel
Set
.Ar debuglevel
to some value.
Supported values are numbers from from 0 to 4,
where a bigger number means
more detailed debugging messages are printed.
Other possible values are
.Cm clock ,
.Cm exprconv ,
.Cm functions ,
.Cm ipc ,
.Cm joins ,
.Cm midi ,
.Cm midistream ,
.Cm mm ,
.Cm parsing ,
.Cm process ,
.Cm relative ,
.Cm seq
and
.Cm song .
Several options may be set by separating them with a comma,
for example
.Dq joins,midi .
.It Fl f Ar device
Sets the MIDI device path.
Interpretation for this depends on the MIDI-interface used.
For
.Cm raw
MIDI devices this the file path with the default value of
.Dq /dev/rmidi0 .
For
.Cm sndio
MIDI devices this is the name of the
.Xr sndio 7
MIDI device with the default value of
.Dq default .
See the
.Fl m
option for setting the MIDI-interface type.
.It Fl m Ar MIDI-interface
Set the
.Ar MIDI-Interface
type
.Nm
uses.
Possible values are
.Cm raw
and
.Cm sndio ,
but not all options may have been compiled in.
See the
.Ar -v
option for supported MIDI-interfaces
and the default MIDI-interface type used.
.It Fl n
Dry run.
Do most things except do not actually play music
or establish any server connections
(implies the
.Fl s
option).
.It Fl s
Run
.Nm
in standalone mode,
in which it does not connect to a server,
but manages interpreter and sequencer subprocesses by itself.
.It Fl v
Show
.Nm
version and the supported MIDI interfaces
.Nm
was compiled with.
.El
.Sh SYNTAX AND SEMANTICS
.Nm
interprets files or standard input written in the
.Nm
language.
The language describes notes (including drum hits)
that trigger midi events played by a sequencer.
Syntax and semantics are very similar to those used in the
.Xr lilypond 1
music typesetting program,
but they are not compatible.
.Pp
Notes are expressed as
.Em letters ,
which are:
.Ql c ,
.Ql d ,
.Ql e ,
.Ql f ,
.Ql g ,
.Ql a
and
.Ql b .
To play the major
.Ql c
scale upwards from middle
.Ql c
(midi note 60) to higher
.Ql c
(midi note 72) one can write:
.Bd -literal -offset indent
c d e f g a b c
.Ed
.Pp
To play scale downwards from middle
.Ql c
(midi note 60) to lower
.Ql c
(midi note 48) one can write:
.Bd -literal -offset indent
c b a g f e d c
.Ed
.Pp
Note that in these examples
the same letter can mean different notes,
for example
.Ql c
can mean middle
.Ql c
(midi note 60),
higher
.Ql c
(midi note 72),
or lower
.Ql c
(midi note 48),
depending on note position in relation to other notes.
This is because the actual note chosen
\(em regarding on which octave to play \(em
depends on previous notes.
If the note letter is the same as previous,
the same note is played,
otherwise a choice must be made
between higher and lower note.
.Nm
chooses to play the note
that is closer to the previous note,
when considering distances between note letters.
Note letters are considered like a circular list,
thus
.Ql b
is closer to
.Ql c
than
.Ql e .
For example:
.Bl -column "XXXX" -offset indent
.It Li c d Ta The chosen
.Ql d
is the
.Em higher
one, because the distance from
.Ql c
to higher
.Ql d
is 1 (c-d),
which is less than the distance to lower
.Ql d ,
which is 6 (c-b-a-g-f-e-d).
In case
.Ql c
was interpreted as midi note 60,
the
.Ql d
that corresponds to midi note 62 is played.
.It
.It Li e b Ta The chosen
.Ql b
is the
.Em lower
one, because the distance from
.Ql e
to lower
.Ql b
is 3 (e-d-c-b),
which is less than the distance to higher
.Ql b ,
which is 4 (e-f-g-a-b).
In case
.Ql e
was interpreted as midi note 76,
the
.Ql b
that corresponds to midi note 71 is played.
.It
.It Li c g Ta The chosen
.Ql g
is the
.Em lower
one, because the distance from
.Ql c
to lower
.Ql g
is 3 (c-b-a-g),
which is less than the distance to higher
.Ql g ,
which is 4 (c-d-e-f-g).
In case
.Ql c
was interpreted as midi note 60,
the
.Ql g
that corresponds to midi note 55 is played.
.It
.It Li f b Ta The chosen
.Ql b
is the
.Em higher
one, because the distance from
.Ql f
to higher
.Ql b
is 3 (f-g-a-b),
which is less than the distance to lower
.Ql b ,
which is 4 (f-e-d-c-b).
In case
.Ql f
was interpreted as midi note 53,
the
.Ql b
that corresponds to midi note 47 is played.
.El
.Pp
Note that in the last example both the higher
.Ql b
and the lower
.Ql b
are at a distance of 6 semitones from
.Ql f .
This does not matter
as the above method is unambiguous
in resolving the played note.
.Pp
In cases where the above method
chooses the wrong note,
this can be affected by
.Em octave modifiers
that force the note to be an octave higher or lower.
Appending
.Ql '
(an apostrophe) to note letter raises the note by one octave,
and appending
.Ql ","
(a comma) to note letter lowers the note by one octave.
Multiple apostrophes and commas can be appended to note letters,
forcing jumps of multiple octaves.
For example, the following snippet plays the midi notes 60,
67, 65, 72 and 48:
.Bd -literal -offset indent
c g' f c' c,,
.Ed
.Pp
Considering those notes one by one:
.Bl -column "X" -offset indent
.It Li c Ta Start with middle
.Ql c
(midi note 60).
.It Li g' Ta The lower
.Ql g
(55) is closer, but move up an octave to 67.
.It Li f Ta The lower
.Ql f
is closer (midi note 65).
.It Li c' Ta The lower
.Ql c
(60) is closer, but move up an octave to 72.
.It Li c,, Ta Play
.Ql c
again, except move down by two octaves (48).
.El
.Pp
Notes can be modified with
.Em note modifiers .
They can be made
.Dq sharp
by appending
.Ql is ,
and they can also be made
.Dq flat
by appending
.Ql es
after the note letter,
but before octave modifiers.
That is,
.Ql fis
means sharp
.Ql f
(raising
.Ql f
by one semitone), and
.Ql aes
means flat
.Ql a
(lowering
.Ql a
by one semitone).
To get a flat
.Ql e ,
both
.Ql es
and
.Ql ees
can be used.
.Pp
Note modifiers do not affect
the note octave resolution method at all.
Consider the following case:
.Bd -literal -offset indent
cis ges
.Ed
.Pp
Here, if
.Ql cis
means midi note 61,
then even though the higher
.Ql ges
(midi note 66) is closer to
.Ql cis
than the lower
.Ql ges
(midi note 54),
the lower
.Ql ges
is chosen, because the lower
.Ql g
is closer to
.Ql c
than the higher
.Ql g ,
as outlined above.
Here, if the higher
.Ql ges
was intended,
the example can be written as:
.Bd -literal -offset indent
cis ges'
.Ed
.Pp
Modifiers can be applied many times,
thus the following equivalences are true:
.Bl -column "X" -offset indent
.It Li "cisis   = d"
.It Li "fes     = e"
.It Li "fisisis = gis"
.It Li "aises   = a"
.It Li "es      = ees"
.El
.Pp
Note lengths are expressed with numbers that follow notes,
where number
.Ql n
means to play a note for 1/n measures.
This means that to play note
.Ql c
for 1/8 measures, one should write
.Ql c8 ,
and when
.Nm
reads
.Ql e12 ,
it interprets that to mean note
.Ql e
should be played for 1/12 measures.
.Pp
Note lengths may be extended with zero or more dots.
Each new dot extends the length by
.Ql 1/(2^n) ,
where
.Ql n
is the dot count.
For example:
.Bl -column "XXXXX" "X" -offset indent
.It Li "c4"     Ta "1/4 measures"
.It Li "c4."    Ta "1/4 + 1/8 = 3/8 measures"
.It Li "c4.."   Ta "1/4 + 1/8 + 1/16 = 7/16 measures"
.It Li "c4..."  Ta "1/4 + 1/8 + 1/16 + 1/32 = 15/32 measures"
.It Li "c4...." Ta "1/4 + 1/8 + 1/16 + 1/32 + 1/64 = 31/64 measures"
.El
.Pp
Previous notes affect subsequent notes
regarding their octave and length.
If there are no previous notes
or a new subexpression is defined,
the default note is used instead as reference point.
The default note is a quarter note middle
.Ql c .
.\" .Sh ENVIRONMENT
.\" For sections 1, 6, 7, and 8 only.
.Sh EXIT STATUS
The
.Nm
utility exits 0 on success, and >0 if an error occurs.
.Sh EXAMPLES
Play a major scale from middle
.Ql c
to higher
.Ql c
using quarter notes:
.Bd -literal -offset indent
c4 d e f g a b c
.Ed
.Pp
Play some drumbeats, with bass drum, snare and steady hihat hits.
.Bd -literal -offset indent
<<
  { bd4            sn           bd8   bd     sd4         }
  { hh16 hh hh hh  hh hh hh hh  hh hh hh hh  hh hh hh hh }
>>
.Ed
.\" .Sh DIAGNOSTICS
.\" For sections 1, 4, 6, 7, 8, and 9 printf/stderr messages only.
.Sh SEE ALSO
.Xr lilypond 1
.\" .Sh STANDARDS
.\" .Sh HISTORY
.Sh AUTHORS
.An Juha Erkkilä Aq Mt je@turnipsi.no-ip.org
.\" .Sh CAVEATS
.Sh BUGS
On
.Fx ,
.Nm
sometimes exits with an error for some unknown reason.
.Pp
Parser does not suggest where parsing fails or why.
.Pp
Drum handling is strange and lacking, for example drum volumes
can not be adjusted.
.Pp
Many others probably, but the most serious one is that
.Nm
is lacking features that a programming language should have,
such as variables, functions and such.
The current plan is to integrate with Tcl
that should provide some of that functionality.
